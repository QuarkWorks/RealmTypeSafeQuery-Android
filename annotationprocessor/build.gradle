apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven' // jitpack.io

buildscript {
    repositories{
        jcenter()
    }
    dependencies {
        classpath 'com.squareup:javapoet:1.9.0'
    }
}

group='com.github.quarkworks' // jitpack.io
def source_GIT_COMMIT = new File(buildDir, 'generated/source/GIT_COMMIT/main/java')


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    implementation project(':annotations')
    implementation "io.realm:realm-annotations:$realm_version"

    kapt "com.google.auto.service:auto-service:1.0-rc2" // don't update yet, won't auto generate code
    compileOnly "com.google.auto.service:auto-service:1.0-rc2" // don't update yet, won't auto generate code

    implementation 'com.squareup:javapoet:1.9.0'
}

repositories {
    mavenCentral()
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += source_GIT_COMMIT
}

//Embed jitpack GIT_COMMIT env variable value.
//Add a build signature to jitpack builds
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.TypeName
import com.squareup.javapoet.TypeSpec

import javax.lang.model.element.Modifier

task compileKotlin.doFirst {
    ext.GIT_COMMIT = System.getenv()['GIT_COMMIT'] ?: "Not Set"

    if (ext.GIT_COMMIT != null) {
        def fs = FieldSpec.builder(TypeName.get(String.class), "val", Modifier.STATIC)
                .initializer('$S', ext.GIT_COMMIT).build()
        def ts = TypeSpec.classBuilder("GIT_COMMIT").addField(fs).build()
        JavaFile.builder("com.quarkworks.android.realmtypesafequery.annotationprocessor", ts)
        .build().writeTo(source_GIT_COMMIT)

    }
}
